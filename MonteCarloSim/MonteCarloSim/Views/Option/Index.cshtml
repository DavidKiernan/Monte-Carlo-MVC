@model PagedList.IPagedList<MonteCarloSim.Models.Option>
<!-- Statement  specifies that the view now gets a PagedList object instead of a List object.-->
<!--statement for PagedList.Mvc gives access to the MVC helper for the paging buttons.-->
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Options";
}

<h2>Options</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<!--Search bar-->
@using (Html.BeginForm("Index", "Option", FormMethod.Get))
{
    <p>
        <!--The text box is initialized with the current search string-->
        Find By Contract Name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Contract Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Expiry Date", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Current Price", "Index", new { sortOrder = ViewBag.CurrSortParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Strike Price", "Index", new { sortOrder = ViewBag.StrikeParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Implied Volatility", "Index", new { sortOrder = ViewBag.IVParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Risk Free Rate", "Index", new { sortOrder = ViewBag.RiskFreeParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Option Type", "Index", new { sortOrder = ViewBag.OptionTypeParm, currentFilter = ViewBag.CurrentFilter })
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                <b>
                    @Html.DisplayFor(modelItem => item.ContractName)
                </b>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ExpiryDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CurrentPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StrikePrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ImpliedVolatility) %
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.RiskFreeRate) %
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OptionType)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }

</table>
<br />
<!-- The current page and total number of pages are displayed. -->
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
